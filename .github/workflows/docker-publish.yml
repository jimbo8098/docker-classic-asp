name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: classic-asp
  IMAGE_ID: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
  VERSION: ${{ GITHUB_REF }}
jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: windows-2019

    steps:
      - name: Push image to GitHub Container Registry
        run: |
          # Use Docker `latest` tag convention
          if($env:VERSION -eq "master") { $env:VERSION="latest"; }

          echo "Image Name=${Env:IMAGE_NAME}"
          echo "IMAGE_ID=${Env:IMAGE_ID}"
          echo "IMAGE_ID=$env:IMAGE_ID"
          echo "IMAGE_ID=$IMAGE_ID"
          echo "Version= ${Env:Version}"


          echo "TAG: ${IMAGE_ID}:${VERSION}"

          docker tag "${Env:IMAGE_NAME}" "${Env:IMAGE_ID}:${Env:VERSION}"
          docker push "${IMAGE_ID}":"${Env:VERSION}"

      - uses: actions/checkout@v2

      - name: Run tests
        run: |
            docker build . --file Dockerfile --tag $Env:IMAGE_NAME --build-arg SVCUSER="testuser" --build-arg SVCPASS="TeStP@ssW0rd" --build-arg SITENAME="test.com"

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: windows-2019
    if: github.event_name == 'push'

    steps:
      - name: Log into GitHub Container Registry
      # TODO: Create a PAT with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image to GitHub Container Registry
        run: |
          set IMAGE_ID="ghcr.io/${{ github.repository_owner }}/${Env:IMAGE_NAME}"
          set VERSION=$GITHUB_REF

          # Use Docker `latest` tag convention
          if($Env:VERSION -eq "master") { $Env:VERSION="latest"; }

          echo "Image Name=${Env:IMAGE_NAME}"
          echo "IMAGE_ID=${Env:IMAGE_ID}"
          echo "IMAGE_ID=$env:IMAGE_ID"
          echo "IMAGE_ID=$IMAGE_ID"
          echo "Version= ${Env:Version}"


          echo "TAG: ${IMAGE_ID}:${VERSION}"

          docker tag "${Env:IMAGE_NAME}" "${Env:IMAGE_ID}:${Env:VERSION}"
          docker push "${IMAGE_ID}":"${Env:VERSION}"
